"""Data models for the product API.

This module contains Pydantic models that define the structure of request and
response data for the product API.
"""

from typing import Optional, List, Any, Union
from typing_extensions import Annotated
from pydantic import BaseModel, Field, BeforeValidator, ConfigDict
from datetime import datetime


def parse_datetime(dt_str: Any) -> datetime | Any:
    """Parse a datetime string, handling timezone information.

    Args:
        dt_str: Datetime string to parse

    Returns:
        Parsed datetime object
    """
    if not dt_str:
        return datetime.now()

    if isinstance(dt_str, str):
        if "Z" in dt_str:
            dt_str = dt_str.replace("Z", "+00:00")

    try:
        return datetime.fromisoformat(dt_str)
    except:
        return datetime.now()


class NutritionFacts(BaseModel):
    """Represents the nutritional information of a product."""

    name: Annotated[Optional[str], Field(description="Brand name of product")]
    calories: Annotated[
        Optional[int], Field(description="Estimated calories per serving.")
    ]
    protein: Annotated[
        Optional[float],
        Field(description="Estimated protein content in grams per serving."),
    ]
    carbs: Annotated[
        Optional[float],
        Field(description="Estimated carbohydrate content in grams per serving."),
    ]
    fat: Annotated[
        Optional[float],
        Field(description="Estimated fat content in grams per serving."),
    ]
    amount: Annotated[
        Optional[float],
        Field(description="Serving amount/quantity as a numeric value."),
    ]
    serving_unit: Annotated[
        Optional[str],
        Field(description="Unit of measurement for the serving (e.g., 'grams', 'ounces')."),
    ]


class Product(BaseModel):
    """Represents a product with its barcode, name, brand, ingredients, and nutritional information.

    Attributes:
        barcode (str): The unique barcode or identifier of the product.
        product_name (str): The common or descriptive name of the product.
        brand_name (str): The name of the brand that manufactures the product.
        ingredients (str): A list or description of the ingredients contained in the product.
        nutrition_facts (NutritionFacts): Detailed nutritional information about the product.
    """

    barcode: Annotated[
        str,
        Field(
            ...,
            alias="code",
            description="The unique barcode or identifier of the product.",
        ),
    ]
    product_name: Annotated[
        str, Field(..., description="The common or descriptive name of the product.")
    ]
    brand_name: Annotated[
        str,
        Field(
            ...,
            alias="brands",
            description="The name of the brand that manufactures the product.",
        ),
    ]
    ingredients: Annotated[
        Optional[str],
        Field(
            None,
            alias="ingredients_text",
            description="A list or description of the ingredients contained in the product.",
        ),
    ]
    nutrition_facts: Annotated[
        Optional[NutritionFacts],
        Field(None, description="Represents the nutritional information of a product."),
    ]
    gpt_nutrition_facts: Annotated[
        Optional[NutritionFacts],
        Field(
            None,
            description="Represents the nutritional information of a product generated by OpenAI.",
        ),
    ]

    model_config = ConfigDict(
        validate_assignment=True, populate_by_name=True, from_attributes=True
    )


class ProductUpdate(BaseModel):
    barcode: Annotated[
        Optional[str],
        Field(
            None,
            alias="code",
            description="The unique barcode or identifier of the product.",
        ),
    ]
    product_name: Annotated[
        Optional[str],
        Field(None, description="The common or descriptive name of the product."),
    ]
    brand_name: Annotated[
        Optional[str],
        Field(None, description="The name of the brand that manufactures the product."),
    ]
    ingredients: Annotated[
        Optional[str],
        Field(
            None,
            alias="ingredients_text",
            description="A list or description of the ingredients contained in the product.",
        ),
    ]
    nutrition_facts: Annotated[
        Optional[NutritionFacts],
        Field(None, description="Represents the nutritional information of a product."),
    ]
    gpt_nutrition_facts: Annotated[
        Optional[NutritionFacts],
        Field(
            None,
            description="Represents the nutritional information of a product generated by OpenAI.",
        ),
    ]

    model_config = ConfigDict(populate_by_name=True, from_attributes=True)


class LoggedProduct(Product):
    created_at: Annotated[
        datetime,
        Field(..., description="Date when the product was created"),
        BeforeValidator(parse_datetime),
    ]


class ProductList(BaseModel):
    """Represents a paginated list of product items.

    Attributes:
        products (Optional[List[Product]]): A list of Product objects. Defaults to an empty list.
        page (int): The current page number. Defaults to 1.
        page_size (int): The number of products to include on each page. Defaults to 20.
        count (int): The total number of products available across all pages. Defaults to 0.
    """

    products: Annotated[
        Optional[Union[List[LoggedProduct], List[Product]]],
        Field(default=[], description="A list of Product objects."),
    ]
    page: Annotated[int, Field(default=1, description="The current page number.")]
    page_size: Annotated[
        int,
        Field(
            default=20, description="The number of products to include on each page."
        ),
    ]
    count: Annotated[
        int,
        Field(
            default=0,
            description="The total number of products available across all pages.",
        ),
    ]


class ProductWithNutrition(BaseModel):
    """Product model with merged nutrition facts (no gpt_nutrition_facts).

    Attributes:
        barcode: The unique barcode or identifier of the product
        product_name: The common or descriptive name of the product
        brand_name: The name of the brand that manufactures the product
        ingredients: A list or description of the ingredients contained in the product
        nutrition_facts: Merged nutritional information (nutrition_facts or gpt_nutrition_facts)
    """
    barcode: Annotated[
        str,
        Field(
            ...,
            alias="code",
            description="The unique barcode or identifier of the product.",
        ),
    ]
    product_name: Annotated[
        str, Field(..., description="The common or descriptive name of the product.")
    ]
    brand_name: Annotated[
        str,
        Field(
            ...,
            alias="brands",
            description="The name of the brand that manufactures the product.",
        ),
    ]
    ingredients: Annotated[
        Optional[str],
        Field(
            None,
            alias="ingredients_text",
            description="A list or description of the ingredients contained in the product.",
        ),
    ]
    nutrition_facts: Annotated[
        Optional[NutritionFacts],
        Field(None, description="Merged nutritional information (nutrition_facts or gpt_nutrition_facts)."),
    ]

    model_config = ConfigDict(
        validate_assignment=True, populate_by_name=True, from_attributes=True
    )


class ProductNutritionResponse(BaseModel):
    """Response model for product search results with merged nutrition facts.

    Attributes:
        products: List of products with merged nutrition facts
        total_products: Total count of products found
        search_query: The search term that was used
    """
    products: List[ProductWithNutrition] = Field(default_factory=list, description="Products with merged nutrition facts")
    total_products: int = Field(0, description="Total count of products found")
    search_query: str = Field(..., description="The search term that was used")


class ProductSearchResponse(BaseModel):
    """Response model for product search results.

    Attributes:
        logged_meals: List of matching products (treated as meals for unified response)
        total_logged_meals: Total count of products found
        search_query: The search term that was used
    """
    logged_meals: List[Product] = Field(default_factory=list, description="Matching products (treated as meals for unified response)")
    total_logged_meals: int = Field(0, description="Total count of products found")
    search_query: str = Field(..., description="The search term that was used")
