"""Base class for AI services"""

from typing import Any


class LLMServiceError(Exception):
    """Custom exception for AI service errors."""

    pass


class BaseLLMService:
    """
    Base class for AI services.

    Provides template methods for generating response from AI while allowing subclasses to override or extend any part as needed.
    """

    async def _send_request(self, prompt: str) -> str:
        """
        Send raw prompt to the AI backend. Subclasses should override this.
        """
        raise NotImplementedError("Subclasses must implement _send_request")

    def _build_prompt(self, request: Any) -> str:
        """
        Construct the prompt string. Subclasses should override this.
        """
        raise NotImplementedError("Subclasses must implement _build_prompt")

    def _parse_response(self, content: str) -> Any:
        """
        Parse raw AI output into structured objects. Subclasses should override this.
        """
        raise NotImplementedError("Subclasses must implement _parse_response")

    async def generate_response(self, request: Any) -> Any:
        """
        Template method: build prompt, send request, parse response.

        Args:
            request: Any
        Returns:
            A parsed response generated by the AI service
        """
        prompt = self._build_prompt(request)
        raw = await self._send_request(prompt)
        return self._parse_response(raw)
